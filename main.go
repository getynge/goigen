package main

import (
	"flag"
	"fmt"
	"github.com/getynge/goigen/generator"
	"github.com/getynge/goigen/processor"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path"
)

func main() {
	l := log.New(os.Stderr, "", log.LstdFlags|log.Lshortfile)
	f := flag.NewFlagSet("goigen", flag.ExitOnError)
	mockDirectory := f.String("mockdirectory", ".", "specifies the directory mocks are generated to")
	filePrefix := f.String("fileprefix", "generated_", "specifies the prefix to add to files generated by goigen")

	err := f.Parse(os.Args[1:])

	if err != nil {
		l.Fatal(err)
	}

	args := f.Args()

	if len(args) != 3 {
		fmt.Fprintln(os.Stderr, args)
		fmt.Fprintln(os.Stderr, "Usage: goigen [options] DIRECTORY RECEIVER INTERFACE")
		f.PrintDefaults()
		os.Exit(0)
	}

	directory := args[0]
	targetStruct := args[1]
	targetInterface := args[2]

	methods, pkg, err := processor.ProcessDirectory(directory, targetStruct)

	if err != nil {
		l.Fatal(err)
	}

	fileTemplate := generator.NewFileTemplate(methods, pkg, targetInterface, *mockDirectory, *filePrefix)
	text, err := fileTemplate.Generate(directory)

	if err != nil {
		l.Fatal(err)
	}

	fullPath := path.Join(directory, fileTemplate.FileName+".go")
	err = ioutil.WriteFile(fullPath, []byte(text), 0755)

	if err != nil {
		l.Fatal(err)
	}

	cmd := exec.Command("go", "generate", fullPath)

	_, err = cmd.Output()

	if err != nil {
		l.Printf("Failed to generate mocks due to error: %s\nPlease generate your mocks manually", err.Error())
	}
}
